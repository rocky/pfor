.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "README 1"
.TH README 1 "2012-06-13" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pfor \- A server\-friendly (parallel) blast program
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIpfor\fR executes a series of commands, usually on remote sites, usually
in parallel. \fIPfor\fR should run in a way that shouldn't trash the server
running \fIpfor\fR. There is some facility for verifying hostnames and
specifying hostnames with patterns. The expansion is done with the
help of an external program. But since \fIpfor\fR is general, the preceding
description may be inadequate.
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&       pfor [simple switches...] [execution switches...] [hostnames or hostname patterns...]
.Ve
.PP
See \*(L"Simple Switches\*(R" and \*(L"Execution-mode Switches\*(R" and \*(L"Hostname Patterns\*(R".
.PP
Simple and Execution-mode switches may be interspersed, but the
hostnames and hostname patterns must come at the end of the argument
list.
.SS "Simple Switches"
.IX Subsection "Simple Switches"
Simple Switches include:
.IP "\-a" 4
.IX Item "-a"
Arguments. Show how pfor interpreted the arguments.
.Sp

.IP "\-h" 4
.IX Item "-h"
Help. Give a help message and exit. If pfor is run with what it thinks
are invalid arguments, it gives an abbreviated version of this help.
.IP "\-n" 4
.IX Item "-n"
No run. Don't really run anything, just show what pfor would do. I
recommend using this switch to test any complex pfor invocation first.
.IP "\-t" 4
.IX Item "-t"
Terse. Don't show host separator bar or give a message when a command
completes with an error return.
.IP "\-p" 4
.IX Item "-p"
Parallel. Execute in parallel. However note that the default \f(CW\*(C`\-z\*(C'\fR
implies \f(CW\*(C`\-p\*(C'\fR. If the \f(CW\*(C`\-z\*(C'\fR switch is not used, the parent of forked
processes becomes init (process id 1). This is done so that if the
pfor program is killed processes are not zombies.
.IP "\-v" 4
.IX Item "-v"
Verbose. Show the \f(CW\*(C`ssh\*(C'\fR and \f(CW\*(C`scp\*(C'\fR commands.
.IP "\-z" 4
.IX Item "-z"
(Obsolete) Zombies. Execute in parallel but this program stays the
parent and terminates only after all of its kids.  Use this switch
if you want to make sure all output is done by the time this
program completes, or if you need to know when all commands have
been executed. This may occur if the program is executed from
another.
.Sp
Since this is the default, it needn't be specified anymore.
.IP "\-sequential" 4
.IX Item "-sequential"
Sequential. Don't fork processes but run them one at a time.
.IP "\-nohostcheck" 4
.IX Item "-nohostcheck"
Don't verify that trailing arguments are valid hostnames.
.IP "\-nopattern" 4
.IX Item "-nopattern"
Don't do pattern expansion on the hostnames. Without this switch
\&\f(CW\*(C`/usr/local/dns/dns_extract.pl\*(C'\fR is called to do the actual
expansion.  See \*(L"Hostname Patterns\*(R" below.
.IP "\-show_hostnames" 4
.IX Item "-show_hostnames"
list hostnames
.IP "\-abort_on_hostname_error" 4
.IX Item "-abort_on_hostname_error"
Abort processing if any hostname error detected. If this switch is
not supplied, invalid hostnames will be removed but the commands
will be run against the remaining (valid) hosts.
.Sp
In cases where you want to defer processing unless all hosts are
valid, use this switch. Note however just because all hostnames
are valid does not mean that the host is reachable. See also the
\&\f(CW\*(C`\-errhostf\*(C'\fR switch.
.IP "\-logf \fIlogfile\fR" 4
.IX Item "-logf logfile"
Log the results of execution to logfile. Without this switch the
output of the commands are sent to standard output.
.IP "\-hostf \fIhostfile\fR" 4
.IX Item "-hostf hostfile"
Read the list of hosts to run commands from file hostfile. The
file should contain one hostname per line. Blank lines are ignored
and comments can be entered by inserting # in column 1 (or after a
newline, for you Unix bigots). See the section on Example 1:
introductory use below for an example of the \-hostf switch and for
the contents of a simple hostfile.
.IP "\-errhostf \fIlogfile\fR" 4
.IX Item "-errhostf logfile"
When a nonzero return code is returned from the execution of a
command (from pfor's standpoint), the name of the host is logged
to logfile. The output is added as a comment before the host name
in the file. This file is in a suitable format to be used on a
subsequent pfor run with this logfile as the argument of the
\&\-hostf switch.
.IP "\-abort_on_hostname_error" 4
.IX Item "-abort_on_hostname_error"
.SS "Execution-mode Switches"
.IX Subsection "Execution-mode Switches"
The section on \*(L"Simple Switches\*(R" above describes switches that modify the
behavior of \fIpfor\fR slightly. The switches described here are the real
meat of \fIpfor\fR: what gets done.
.PP
The heart of \fIpfor\fR contains an \*(L"engine\*(R" for running a series of commands
and managing the execution. The mechanism is pretty simple and general:
an array of list of commands to run and an array of CPUs to run them on.
However in order to make it easier to do common tasks, some canned
command sequences have been built in. In particular:
.IP "\(bu" 4
Run an executable stored locally at a remote site, removing the file
after successful execution. See the \f(CW\*(C`\-lcmdf\*(C'\fR switch below.
.IP "\(bu" 4
Copy a file stored locally to a remote site, like \f(CW\*(C`scp\*(C'\fR. See the \f(CW\*(C`\-scp\*(C'\fR
switches below.
.IP "\(bu" 4
Copy a \fIrpm\fR and and install that. See the \f(CW\*(C`\-rpm\*(C'\fR switch below
.IP "\(bu" 4
Untar a file across the network. See the \f(CW\*(C`\-tarf\*(C'\fR switch below.
.IP "\(bu" 4
Untar a file across the network and then run an installation program
contained in the file. See the \f(CW\*(C`\-tar_install\*(C'\fR switch below
.IP "\(bu" 4
Finally, there is a way just to specify how to put commands into the
command array. To be useful though one needs to get access to the
thing that's being looped over, usually a hostname. See the \f(CW\*(C`\-exec2\*(C'\fR
switch below.
.PP
It usually doesn't make sense to copy a file to a remote site and untar
it across the network; or execute a tar file remotely and then remove
it (that's usually done with an executable file).  So, for the most
part, the switches described here are mutually exclusive. However one
of these switches need to be specified.
.PP
Now to the specific list of switches...
.IP "\-ssh commands" 4
.IX Item "-ssh commands"
Execute commands on the specified hosts. An implied \f(CW\*(C`ssh $host\*(C'\fR is
prepended to the beginning of the command.
.Sp
In order to keep pfor's grubby while loops from interpreting the
blank-delimited arguments intended for the command, you should
surround the command and its arguments in some sort of quotes (or
more cumbersome: escape the blanks). If the command also contains
shell expansion characters (like *), probably the best way to go
with most shells is with single quotes.
.Sp
See \*(L"Example 1: introductory use\*(R" and "Example 2: running several commands remotely using \f(CW\*(C`\-ssh\*(C'\fR" for some simple invocations of this format.
.IP "\-scp \fIlocal-file\fR \-rcmdf \fIremote-path-or-file\fR" 4
.IX Item "-scp local-file -rcmdf remote-path-or-file"
Copy \fIlocal-file\fR to \fIremote-path-or-file\fR.  If
\&\fIremote-path-or-file\fR is omitted, the file will be copied to the the
same place as \fIlocal-file\fR as \fIscp\fR would do.
.Sp
If \fIremote-cmdfile\fR ends in a /, then the name is interpreted as a
directory and the copy will have the same basename as cmdfile.
Again the same as \f(CW\*(C`scp\*(C'\fR would do.
.Sp
See "Example 6: running \f(CW\*(C`scp\*(C'\fR in parallel using \f(CW\*(C`\-scp\*(C'\fR"
for an example of this kind of invocation.
.IP "\-rpm \fIrpm-file\fR" 4
.IX Item "-rpm rpm-file"
Copy \fIrpm-file\fR and then run the \fIrpm\fR command to install that.
.IP "\-lcmdf \fIcmdfile\fR [\-rcmdf \fIremote-cmdfile\fR] [\-args \fIarguments\fR] [\-nrsh]" 4
.IX Item "-lcmdf cmdfile [-rcmdf remote-cmdfile] [-args arguments] [-nrsh]"
Copy \fIcmdfile\fR to \fIremote-cmdfile\fR supplying arguments; then run
\&\fIcmdfile\fR and finally remove \fIremote-cmdfile\fR.  If \fIremote-cmdfile\fR is
omitted, the file will be copied to the \f(CW\*(C`/tmp\*(C'\fR directory.
.Sp
If \fIremote-cmdfile\fR ends in a slash (\f(CW\*(C`/\*(C'\fR), then the name is
interpreted as a directory and the copy will have the same basename as
\&\fIcmdfile\fR.
.Sp
See "Example 4: Copying and running a program remotely
using the \f(CW\*(C`\-lcmdf\*(C'\fR switch" for some examples of this
kind of invocation.
.Sp
The \f(CW\*(C`\-nrsh\*(C'\fR switch is probably historical laziness. Probably you can
do what you want with \f(CW\*(C`\-scp\*(C'\fR with less hassle.
.Sp
If the \f(CW\*(C`\-nrsh\*(C'\fR switch is used, the effect is like \f(CW\*(C`scp\*(C'\fR, except that
the default destination is in the \f(CW\*(C`/tmp\*(C'\fR directory.
.IP "\-tarf \fItar-file\fR" 4
.IX Item "-tarf tar-file"
Untar tar-file across the network to the hosts specified. If the
<tar\-file> extension ends in \f(CW\*(C`.gz\*(C'\fR or \f(CW\*(C`.Z\*(C'\fR the program is uncompressed
courtesy of \s-1GNU\s0 tar.
.Sp
In particular, run:
.Sp
.Vb 1
\&    cat tar\-file a\*^XX "rsh $host \*(Aqcd / && tar \-xvpf \-\*(Aq"
.Ve
.Sp
or
.Sp
.Vb 1
\&    cat tar\-file a\*^XX "rsh $host \*(Aqcd / && /usr/local/bin/tar \-xzvpf \-\*(Aq"
.Ve
.IP "\-tar_install \fItar-file\fR" 4
.IX Item "-tar_install tar-file"
Untar a \fItar-file\fR across the network to the hosts specified. Then
run an installation program. The installation program is assumed
be in the tar-file in the /tmp directory and having the same name
as the tar file (minus the .tar extension).
.Sp
For example if tar-file is /usr/sa/rockyshits/myfavorites.tar
there would be an executable called tmp/myfavorites in the tar
file. Presumably this code would do installation on the host after
the tar file has be extracted across the network.
.Sp
But some code is worth a thousand words. Here's what pfor really
does:
.Sp
.Vb 1
\&    cat path/pkg.tar a\*^XX "rsh $host \*(Aqcd / && tar \-xvpf \-\*(Aq" && /tmp/pkg && rm /tmp/pkg
.Ve
.Sp
where \fIpkg\fR is the name of the package. If the tar file ends in \f(CW\*(C`.gz\*(C'\fR or \f(CW\*(C`.Z\*(C'\fR
the \f(CW\*(C`\-z\*(C'\fR switch is added and /usr/local/bin/tar (\s-1GNU\s0 tar) is used.
.Sp
See "Example 3: blasting out a tar file using the \f(CW\*(C`\-tarf\*(C'\fR switch" for an example of this format.
.IP "\-exec2 \fIcommands\fR" 4
.IX Item "-exec2 commands"
This is the most general form for running commands. The only thing
that gets run over each argument (usually hostname) in pfor's loop is
what you specify. To get access to the loop variable use \f(CW$host\fR.  See
"Example 5: running locally using \f(CW\*(C`\-exec2\*(C'\fR" below.
.SS "Hostname Patterns"
.IX Subsection "Hostname Patterns"
\&\fIpfor\fR owes its existence to its ability to run commands looping over
host names. Thus the final arguments to \fIpfor\fR may specify hostnames.  To
make it easy to blast, the arguments can either be hostnames or
patterns which will be expanded to hostnames.
.PP
Unless the \f(CW\*(C`\-nohostcheck\*(C'\fR switch is specified, a \fI\fIgethostbyname()\fI\fR
library call is issued to determine whether an argument is a host name
or pattern.  If this command returns without error, the argument is a
hostname; otherwise it is treated as a pattern.
.PP
A hostname pattern expands to a list of hostnames. When available, the
program \f(CW\*(C`/usr/local/dns/dns_extract.pl\*(C'\fR is called to do the actual
expansion.  So you might want to consult that for a description of
patterns.  Patterns beginning with ! may have to be escaped so the
shell doesn't interpret them. See the section on "Example 5: running
locally using \f(CW\*(C`\-exec2\*(C'\fR" below.
.PP
Non-comment entries contained in a hostfile specified by \-hostf are
treated exactly as a hostname or hostname pattern would be if specified
on the command line.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Example 1: introductory use"
.IX Subsection "Example 1: introductory use"
I've sometimes wondered what's the workstation that so-and-so uses.
Since who shows who is logged onto the workstation, the user that
appears most often is probably the person sitting at the console. So to
glean the non-macho users sitting at a given workstation try:
.PP
.Vb 1
\&     pfor \-p \-ssh who drmcl002 drmcl021 drmcl004 drmcl005 canton
.Ve
.PP
This is like the \s-1POSIX\s0 shell code:
.PP
.Vb 3
\&     for host in drmcl002 drmcl0021 drmcl004 drmcl005 canton ; do
\&        ssh $host who &
\&     done
.Ve
.PP
But there is are some subtle differences between this and the above shell
code.
.PP
First, \fIpfor\fR is more caring about the server that the command is run on.
If the load average is too high, \fIpfor\fR will delay in forking more
processes. Also \fIpfor\fR will not forge ahead if the AIX/SunOS's network
card's memory buffers (mbufs) are overloaded.
.PP
Second, the above shell program may intersperse output from various
workstations making it hard to tell who's logged on where. \fIpfor\fR will
give all output from a site together with a separator line to indicate
where the output came from.
.PP
If you actually try it (I just did) you may find that drmcl021 doesn't
want to respond to a who command. So you may find that the output for
drmcl021 comes after the output for canton.
.PP
Instead of typing out the names of the hosts, it might be more
convenient to put them all into a file and point \fIpfor\fR at that.
.PP
That's what the \-hostf switch is all about. So that above example could
be done as:
.PP
.Vb 1
\&    pfor \-z \-hostf /usr/local/etc/banner.hostf \-ssh who
.Ve
.PP
where \f(CW\*(C`/urs/local/etc/banner.hostf\*(C'\fR is a file containing:
.PP
.Vb 1
\&    banner1
\&
\&    # Blank lines and lines beginning with # are comments.
\&
\&    banner2
\&    %include banner\-vms.hostf
.Ve
.PP
Now let's change that so that we just get the users and remove all of
that other crap. Instead of who we really want to run
.PP
.Vb 2
\&     export PATH=/usr
\&     who a\*^XX awk \*(Aq{ print $1 }\*(Aq a\*^XX sort a\*^XX uniq
.Ve
.PP
One way to do this is to put this in a command file with #!/bin/ksh and
setting a \s-1PATH\s0 so we know what programs we're getting. That is:
.PP
.Vb 3
\&      #!/bin/ksh
\&      export PATH=/usr/bin
\&      who a\*^XX awk \*(Aq{ print $1 }\*(Aq a\*^XX sort a\*^XX uniq
.Ve
.PP
Let's say the above was put in whouniq.ksh. Then we could run:
.PP
.Vb 1
\&      pfor \-z \-hostf /usr/local/etc/banner.hostf \-lcmdf whouniq.ksh
.Ve
.ie n .SS "Example 2: running several commands remotely using ""\-ssh"""
.el .SS "Example 2: running several commands remotely using \f(CW\-ssh\fP"
.IX Subsection "Example 2: running several commands remotely using -ssh"
To get some statistics about servers \f(CW\*(C`sa\*(C'\fR, \f(CW\*(C`bonzo\*(C'\fR, and \f(CW\*(C`filesvr\*(C'\fR, try this:
.PP
.Vb 1
\&    pfor \-z \-ssh \*(Aquptime;pstat \-s;vmstat;iostat\*(Aq sa bonzo filesvr
.Ve
.PP
In contrast to the examples above, the invocations is done in
parallel since the \f(CW\*(C`\-z\*(C'\fR switch is not used: first \f(CW\*(C`sa\*(C'\fR is tried; after
that completes \f(CW\*(C`bonzo\*(C'\fR, and after that completes \f(CW\*(C`filesvr\*(C'\fR.
.PP
Note that the argument to \f(CW\*(C`\-ssh\*(C'\fR is enclosed in quotes to keep the
shell and \fIpfor\fR from munging it. Similarly, if you wanted to list
all files in /usr/local on the sites listed in file
\&\f(CW\*(C`/usr/local/etc/cpu10.hosts\*(C'\fR you might try:
.PP
.Vb 1
\&    pfor \-ssh \*(Aqls \-l /usr/local/*\*(Aq \-hostf /usr/local/etc/cpu10.hosts
.Ve
.PP
Again the single quotes keep the shell from expanding * on the server
issuing pfor before pfor even gets to see the command.
.ie n .SS "Example 3: blasting out a tar file using the ""\-tarf"" switch"
.el .SS "Example 3: blasting out a tar file using the \f(CW\-tarf\fP switch"
.IX Subsection "Example 3: blasting out a tar file using the -tarf switch"
To blast out \f(CW\*(C`home\-opcuser.tar\*(C'\fR to the sites listed in file 
\&\f(CW\*(C`cpu27.hosts\*(C'\fR and log the results:
.PP
.Vb 1
\&   pfor \-logf /tmp/opcuser.log \-tarf \*(Aqhome\-opcuser.tar\*(Aq \-hostf cpu27.hosts
.Ve
.PP
Note that if this is called from another program, the log file will be
complete before \fIpfor\fR returns.
.PP
But I'd recommend that before you really do something like this to lots
of sites, you consider using the \f(CW\*(C`\-n\*(C'\fR switch to see what damage you may
be about to do.
.ie n .SS "Example 4: Copying and running a program remotely using the ""\-lcmdf"" switch"
.el .SS "Example 4: Copying and running a program remotely using the \f(CW\-lcmdf\fP switch"
.IX Subsection "Example 4: Copying and running a program remotely using the -lcmdf switch"
To execute script /rockyshits/fix_io.ksh on all branch servers:
.PP
.Vb 1
\&    pfor \-lcmdf /rockyshits/fix_io.ksh \-hostf /usr/local/dns/branch_servers
.Ve
.PP
Here is an equivalent, but longer, way to do this:
.PP
.Vb 1
\&    pfor \-lcmdf /rockyshits/fix_io.sh \-rcmdf /tmp/ \-hostf /usr/local/dns/branch_servers
.Ve
.PP
Since the argument of \f(CW\*(C`\-rcmdf\*(C'\fR ends in a slash (\f(CW\*(C`/tmp/\*(C'\fR) it is taken to be
directory name. Therefore the file \f(CW\*(C`/rockyshits/fix_io.sh\*(C'\fR is copied to
\&\f(CW$host:\fR/tmp/fix_io.ksh.
.ie n .SS "Example 5: running locally using ""\-exec2"""
.el .SS "Example 5: running locally using \f(CW\-exec2\fP"
.IX Subsection "Example 5: running locally using -exec2"
Suppose we want to get the \s-1IP\s0 addresses for all of the cpu27's except
the wire code for Boston, jj.  The \f(CW\*(C`/usr/bin/host\*(C'\fR command run locally
will probably do the trick. So try:
.PP
.Vb 1
\&      pfor \-exec2 \*(Aq/usr/bin/host $host\*(Aq cpu27 \e!jj
.Ve
.PP
Note that here we don't have to run any command remotely. So \-exec2 is
used. The variable \f(CW$host\fR expands to each host that matches the pattern
cpu27 !jj. As of Oct '95 this pattern expands to:
.PP
.Vb 2
\&     cpu14.cg, cpu14.cp, cpu14.fn, cpu14.jg, cpu14.jx, cpu14.pw,
\&     cpu14.ts, cpu14.we
.Ve
.PP
In order for pattern expansion to work, the program
\&\f(CW\*(C`/usr/local/dns/dns_extract.pl\*(C'\fR needs to be around. Right now, it's only
available on sa.
.ie n .SS "Example 6: running ""scp"" in parallel using ""\-scp"""
.el .SS "Example 6: running \f(CWscp\fP in parallel using \f(CW\-scp\fP"
.IX Subsection "Example 6: running scp in parallel using -scp"
To copy root's /.rhost to cpu10's:
.PP
.Vb 1
\&      pfor \-scp /.rhost cpu10
.Ve
.PP
This also can be accomplished by:
.PP
.Vb 1
\&      pfor \-scp /.rhost \-rcmdf / cpu10
.Ve
.PP
or even more verbosely:
.PP
.Vb 1
\&      pfor \-scp /.rhost \-rcmdf /.rhosts cpu10
.Ve
.PP
\fILocal Server Friendliness\fR
.IX Subsection "Local Server Friendliness"
.PP
Watch this space for a description netstat \-m, load average checking,
and handling of zombies.
.SH "BUGS"
.IX Header "BUGS"
The program is necessarily complex. However the user interface could be
better. Blame it on Jim; he's not around anyway.
.PP
The program is now a bit over bloated. It's a little bit AIX/SunOS
oriented (netstat \-m doesn't cut it on Solaris).
.PP
More sophisticated command sequences as are found in \f(CW\*(C`\-tarf\*(C'\fR and
\&\f(CW\*(C`\-tar_install\*(C'\fR will probably be added.
.PP
For example, checking checksums on untarring across the network should
be done.  A mechanism for running a program locally after a tar install
might be needed. A mechanism for catching error codes remotely is
needed: \f(CW\*(C`ssh\*(C'\fR doesn't cut it; something more like /home/opcuser/execute
might be used. And so on.
.PP
All this means more complexity; but perhaps it can be added in a clean
way.
.PP
I've offloaded the \s-1DNS\s0 pattern part to another program
\&\f(CW\*(C`dns_extract.pl\*(C'\fR.  That program should be using nslookup or dig to
get \s-1DNS\s0 info if local maps are not available.
.SH "History"
.IX Header "History"
Rocky Bernstein wrote the first cuts of the program in desperation. He
then convinced Jim Anderson that it'd be a fun thing to work on. Jim
handled the program during his brief tenure here. Rocky also wrote the
first cut of the manual after Sean Coates suggested that it was used
enough to warrant one.  (Any volunteers for program/manual
maintenance?)
.PP
Since it's come up a lot, here's how the name pfor was \*(L"chosen.\*(R"  There
was a program of the same name written by Andy Lowry (at Morgan\-
Stanley, but I knew him from \s-1IBM\s0 Watson). Andy stole the name from a
construct in the \s-1IBM\s0 \*(L"Parallel Fortran\*(R" compiler. So pfor stands for
\&\*(L"Parallel For.\*(R" Maybe it'd be simpler if we renamed it to \*(L"blast.\*(R"
.PP
The program has gotten better (or worse), but definitely more complex
from suggestions by numerous PaineWebber folk. The people I can think
of offhand are: Joel Weisberg and Spencer Siu.
